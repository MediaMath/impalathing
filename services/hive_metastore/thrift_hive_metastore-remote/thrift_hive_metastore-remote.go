// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
	"github.com/MediaMath/impalathing/services/fb303"
        "github.com/MediaMath/impalathing/services/hive_metastore"
)

var _ = fb303.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
  fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
  fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData, bool cascade)")
  fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
  fmt.Fprintln(os.Stderr, "   get_all_databases()")
  fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
  fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
  fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
  fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
  fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
  fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
  fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
  fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
  fmt.Fprintln(os.Stderr, "  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
  fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
  fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
  fmt.Fprintln(os.Stderr, "   get_table_objects_by_name(string dbname,  tbl_names)")
  fmt.Fprintln(os.Stderr, "   get_table_names_by_filter(string dbname, string filter, i16 max_tables)")
  fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
  fmt.Fprintln(os.Stderr, "  void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
  fmt.Fprintln(os.Stderr, "  Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  i32 add_partitions( new_parts)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
  fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_by_names(string db_name, string tbl_name,  names)")
  fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
  fmt.Fprintln(os.Stderr, "  void alter_partitions(string db_name, string tbl_name,  new_parts)")
  fmt.Fprintln(os.Stderr, "  void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void rename_partition(string db_name, string tbl_name,  part_vals, Partition new_part)")
  fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
  fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
  fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
  fmt.Fprintln(os.Stderr, "  void markPartitionForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
  fmt.Fprintln(os.Stderr, "  bool isPartitionMarkedForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
  fmt.Fprintln(os.Stderr, "  Index add_index(Index new_index, Table index_table)")
  fmt.Fprintln(os.Stderr, "  void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)")
  fmt.Fprintln(os.Stderr, "  bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  Index get_index_by_name(string db_name, string tbl_name, string index_name)")
  fmt.Fprintln(os.Stderr, "   get_indexes(string db_name, string tbl_name, i16 max_indexes)")
  fmt.Fprintln(os.Stderr, "   get_index_names(string db_name, string tbl_name, i16 max_indexes)")
  fmt.Fprintln(os.Stderr, "  bool update_table_column_statistics(ColumnStatistics stats_obj)")
  fmt.Fprintln(os.Stderr, "  bool update_partition_column_statistics(ColumnStatistics stats_obj)")
  fmt.Fprintln(os.Stderr, "  ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  bool delete_table_column_statistics(string db_name, string tbl_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
  fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
  fmt.Fprintln(os.Stderr, "   get_role_names()")
  fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
  fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
  fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
  fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
  fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
  fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
  fmt.Fprintln(os.Stderr, "   set_ugi(string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)")
  fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
  fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
  fmt.Fprintln(os.Stderr, "  string getName()")
  fmt.Fprintln(os.Stderr, "  string getVersion()")
  fmt.Fprintln(os.Stderr, "  fb_status getStatus()")
  fmt.Fprintln(os.Stderr, "  string getStatusDetails()")
  fmt.Fprintln(os.Stderr, "   getCounters()")
  fmt.Fprintln(os.Stderr, "  i64 getCounter(string key)")
  fmt.Fprintln(os.Stderr, "  void setOption(string key, string value)")
  fmt.Fprintln(os.Stderr, "  string getOption(string key)")
  fmt.Fprintln(os.Stderr, "   getOptions()")
  fmt.Fprintln(os.Stderr, "  string getCpuProfile(i32 profileDurationInSec)")
  fmt.Fprintln(os.Stderr, "  i64 aliveSince()")
  fmt.Fprintln(os.Stderr, "  void reinitialize()")
  fmt.Fprintln(os.Stderr, "  void shutdown()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := hive_metastore.NewThriftHiveMetastoreClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "create_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
      flag.Usage()
    }
    arg237 := flag.Arg(1)
    mbTrans238 := thrift.NewTMemoryBufferLen(len(arg237))
    defer mbTrans238.Close()
    _, err239 := mbTrans238.WriteString(arg237)
    if err239 != nil {
      Usage()
      return
    }
    factory240 := thrift.NewTJSONProtocolFactory()
    jsProt241 := factory240.GetProtocol(mbTrans238)
    argvalue0 := hive_metastore.NewDatabase()
    err242 := argvalue0.Read(jsProt241)
    if err242 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateDatabase(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabase(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_database":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DropDatabase requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropDatabase(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_databases":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabases(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_all_databases":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllDatabases(context.Background()))
    fmt.Print("\n")
    break
  case "alter_database":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg249 := flag.Arg(2)
    mbTrans250 := thrift.NewTMemoryBufferLen(len(arg249))
    defer mbTrans250.Close()
    _, err251 := mbTrans250.WriteString(arg249)
    if err251 != nil {
      Usage()
      return
    }
    factory252 := thrift.NewTJSONProtocolFactory()
    jsProt253 := factory252.GetProtocol(mbTrans250)
    argvalue1 := hive_metastore.NewDatabase()
    err254 := argvalue1.Read(jsProt253)
    if err254 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AlterDatabase(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetType requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
      flag.Usage()
    }
    arg256 := flag.Arg(1)
    mbTrans257 := thrift.NewTMemoryBufferLen(len(arg256))
    defer mbTrans257.Close()
    _, err258 := mbTrans257.WriteString(arg256)
    if err258 != nil {
      Usage()
      return
    }
    factory259 := thrift.NewTJSONProtocolFactory()
    jsProt260 := factory259.GetProtocol(mbTrans257)
    argvalue0 := hive_metastore.NewType()
    err261 := argvalue0.Read(jsProt260)
    if err261 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropType requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_type_all":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetTypeAll(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_fields":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFields(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_schema":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetSchema(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "create_table":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
      flag.Usage()
    }
    arg268 := flag.Arg(1)
    mbTrans269 := thrift.NewTMemoryBufferLen(len(arg268))
    defer mbTrans269.Close()
    _, err270 := mbTrans269.WriteString(arg268)
    if err270 != nil {
      Usage()
      return
    }
    factory271 := thrift.NewTJSONProtocolFactory()
    jsProt272 := factory271.GetProtocol(mbTrans269)
    argvalue0 := hive_metastore.NewTable()
    err273 := argvalue0.Read(jsProt272)
    if err273 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_table_with_environment_context":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateTableWithEnvironmentContext requires 2 args")
      flag.Usage()
    }
    arg274 := flag.Arg(1)
    mbTrans275 := thrift.NewTMemoryBufferLen(len(arg274))
    defer mbTrans275.Close()
    _, err276 := mbTrans275.WriteString(arg274)
    if err276 != nil {
      Usage()
      return
    }
    factory277 := thrift.NewTJSONProtocolFactory()
    jsProt278 := factory277.GetProtocol(mbTrans275)
    argvalue0 := hive_metastore.NewTable()
    err279 := argvalue0.Read(jsProt278)
    if err279 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg280 := flag.Arg(2)
    mbTrans281 := thrift.NewTMemoryBufferLen(len(arg280))
    defer mbTrans281.Close()
    _, err282 := mbTrans281.WriteString(arg280)
    if err282 != nil {
      Usage()
      return
    }
    factory283 := thrift.NewTJSONProtocolFactory()
    jsProt284 := factory283.GetProtocol(mbTrans281)
    argvalue1 := hive_metastore.NewEnvironmentContext()
    err285 := argvalue1.Read(jsProt284)
    if err285 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateTableWithEnvironmentContext(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "drop_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropTable(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_tables":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTables(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_all_tables":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAllTables(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_table_objects_by_name":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTableObjectsByName requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg295 := flag.Arg(2)
    mbTrans296 := thrift.NewTMemoryBufferLen(len(arg295))
    defer mbTrans296.Close()
    _, err297 := mbTrans296.WriteString(arg295)
    if err297 != nil { 
      Usage()
      return
    }
    factory298 := thrift.NewTJSONProtocolFactory()
    jsProt299 := factory298.GetProtocol(mbTrans296)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreGetTableObjectsByNameArgs()
    err300 := containerStruct1.ReadField2(jsProt299)
    if err300 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.TblNames
    value1 := argvalue1
    fmt.Print(client.GetTableObjectsByName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_table_names_by_filter":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableNamesByFilter requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err303 := (strconv.Atoi(flag.Arg(3)))
    if err303 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetTableNamesByFilter(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg306 := flag.Arg(3)
    mbTrans307 := thrift.NewTMemoryBufferLen(len(arg306))
    defer mbTrans307.Close()
    _, err308 := mbTrans307.WriteString(arg306)
    if err308 != nil {
      Usage()
      return
    }
    factory309 := thrift.NewTJSONProtocolFactory()
    jsProt310 := factory309.GetProtocol(mbTrans307)
    argvalue2 := hive_metastore.NewTable()
    err311 := argvalue2.Read(jsProt310)
    if err311 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterTable(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_table_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterTableWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg314 := flag.Arg(3)
    mbTrans315 := thrift.NewTMemoryBufferLen(len(arg314))
    defer mbTrans315.Close()
    _, err316 := mbTrans315.WriteString(arg314)
    if err316 != nil {
      Usage()
      return
    }
    factory317 := thrift.NewTJSONProtocolFactory()
    jsProt318 := factory317.GetProtocol(mbTrans315)
    argvalue2 := hive_metastore.NewTable()
    err319 := argvalue2.Read(jsProt318)
    if err319 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg320 := flag.Arg(4)
    mbTrans321 := thrift.NewTMemoryBufferLen(len(arg320))
    defer mbTrans321.Close()
    _, err322 := mbTrans321.WriteString(arg320)
    if err322 != nil {
      Usage()
      return
    }
    factory323 := thrift.NewTJSONProtocolFactory()
    jsProt324 := factory323.GetProtocol(mbTrans321)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err325 := argvalue3.Read(jsProt324)
    if err325 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "add_partition":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
      flag.Usage()
    }
    arg326 := flag.Arg(1)
    mbTrans327 := thrift.NewTMemoryBufferLen(len(arg326))
    defer mbTrans327.Close()
    _, err328 := mbTrans327.WriteString(arg326)
    if err328 != nil {
      Usage()
      return
    }
    factory329 := thrift.NewTJSONProtocolFactory()
    jsProt330 := factory329.GetProtocol(mbTrans327)
    argvalue0 := hive_metastore.NewPartition()
    err331 := argvalue0.Read(jsProt330)
    if err331 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPartition(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_partition_with_environment_context":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddPartitionWithEnvironmentContext requires 2 args")
      flag.Usage()
    }
    arg332 := flag.Arg(1)
    mbTrans333 := thrift.NewTMemoryBufferLen(len(arg332))
    defer mbTrans333.Close()
    _, err334 := mbTrans333.WriteString(arg332)
    if err334 != nil {
      Usage()
      return
    }
    factory335 := thrift.NewTJSONProtocolFactory()
    jsProt336 := factory335.GetProtocol(mbTrans333)
    argvalue0 := hive_metastore.NewPartition()
    err337 := argvalue0.Read(jsProt336)
    if err337 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg338 := flag.Arg(2)
    mbTrans339 := thrift.NewTMemoryBufferLen(len(arg338))
    defer mbTrans339.Close()
    _, err340 := mbTrans339.WriteString(arg338)
    if err340 != nil {
      Usage()
      return
    }
    factory341 := thrift.NewTJSONProtocolFactory()
    jsProt342 := factory341.GetProtocol(mbTrans339)
    argvalue1 := hive_metastore.NewEnvironmentContext()
    err343 := argvalue1.Read(jsProt342)
    if err343 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddPartitionWithEnvironmentContext(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "add_partitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartitions requires 1 args")
      flag.Usage()
    }
    arg344 := flag.Arg(1)
    mbTrans345 := thrift.NewTMemoryBufferLen(len(arg344))
    defer mbTrans345.Close()
    _, err346 := mbTrans345.WriteString(arg344)
    if err346 != nil { 
      Usage()
      return
    }
    factory347 := thrift.NewTJSONProtocolFactory()
    jsProt348 := factory347.GetProtocol(mbTrans345)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsArgs()
    err349 := containerStruct0.ReadField1(jsProt348)
    if err349 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.NewParts_
    value0 := argvalue0
    fmt.Print(client.AddPartitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "append_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg352 := flag.Arg(3)
    mbTrans353 := thrift.NewTMemoryBufferLen(len(arg352))
    defer mbTrans353.Close()
    _, err354 := mbTrans353.WriteString(arg352)
    if err354 != nil { 
      Usage()
      return
    }
    factory355 := thrift.NewTJSONProtocolFactory()
    jsProt356 := factory355.GetProtocol(mbTrans353)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionArgs()
    err357 := containerStruct2.ReadField3(jsProt356)
    if err357 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.AppendPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "append_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AppendPartitionByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "drop_partition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg363 := flag.Arg(3)
    mbTrans364 := thrift.NewTMemoryBufferLen(len(arg363))
    defer mbTrans364.Close()
    _, err365 := mbTrans364.WriteString(arg363)
    if err365 != nil { 
      Usage()
      return
    }
    factory366 := thrift.NewTJSONProtocolFactory()
    jsProt367 := factory366.GetProtocol(mbTrans364)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionArgs()
    err368 := containerStruct2.ReadField3(jsProt367)
    if err368 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartition(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition_by_name":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartitionByName(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg376 := flag.Arg(3)
    mbTrans377 := thrift.NewTMemoryBufferLen(len(arg376))
    defer mbTrans377.Close()
    _, err378 := mbTrans377.WriteString(arg376)
    if err378 != nil { 
      Usage()
      return
    }
    factory379 := thrift.NewTJSONProtocolFactory()
    jsProt380 := factory379.GetProtocol(mbTrans377)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionArgs()
    err381 := containerStruct2.ReadField3(jsProt380)
    if err381 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.GetPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg384 := flag.Arg(3)
    mbTrans385 := thrift.NewTMemoryBufferLen(len(arg384))
    defer mbTrans385.Close()
    _, err386 := mbTrans385.WriteString(arg384)
    if err386 != nil { 
      Usage()
      return
    }
    factory387 := thrift.NewTJSONProtocolFactory()
    jsProt388 := factory387.GetProtocol(mbTrans385)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
    err389 := containerStruct2.ReadField3(jsProt388)
    if err389 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg391 := flag.Arg(5)
    mbTrans392 := thrift.NewTMemoryBufferLen(len(arg391))
    defer mbTrans392.Close()
    _, err393 := mbTrans392.WriteString(arg391)
    if err393 != nil { 
      Usage()
      return
    }
    factory394 := thrift.NewTJSONProtocolFactory()
    jsProt395 := factory394.GetProtocol(mbTrans392)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
    err396 := containerStruct4.ReadField5(jsProt395)
    if err396 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionWithAuth(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetPartitionByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err402 := (strconv.Atoi(flag.Arg(3)))
    if err402 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitions(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err405 := (strconv.Atoi(flag.Arg(3)))
    if err405 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg407 := flag.Arg(5)
    mbTrans408 := thrift.NewTMemoryBufferLen(len(arg407))
    defer mbTrans408.Close()
    _, err409 := mbTrans408.WriteString(arg407)
    if err409 != nil { 
      Usage()
      return
    }
    factory410 := thrift.NewTJSONProtocolFactory()
    jsProt411 := factory410.GetProtocol(mbTrans408)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionsWithAuthArgs()
    err412 := containerStruct4.ReadField5(jsProt411)
    if err412 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionsWithAuth(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err415 := (strconv.Atoi(flag.Arg(3)))
    if err415 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitionNames(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg418 := flag.Arg(3)
    mbTrans419 := thrift.NewTMemoryBufferLen(len(arg418))
    defer mbTrans419.Close()
    _, err420 := mbTrans419.WriteString(arg418)
    if err420 != nil { 
      Usage()
      return
    }
    factory421 := thrift.NewTJSONProtocolFactory()
    jsProt422 := factory421.GetProtocol(mbTrans419)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsArgs()
    err423 := containerStruct2.ReadField3(jsProt422)
    if err423 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err424 := (strconv.Atoi(flag.Arg(4)))
    if err424 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsPs(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_ps_with_auth":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg427 := flag.Arg(3)
    mbTrans428 := thrift.NewTMemoryBufferLen(len(arg427))
    defer mbTrans428.Close()
    _, err429 := mbTrans428.WriteString(arg427)
    if err429 != nil { 
      Usage()
      return
    }
    factory430 := thrift.NewTJSONProtocolFactory()
    jsProt431 := factory430.GetProtocol(mbTrans428)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
    err432 := containerStruct2.ReadField3(jsProt431)
    if err432 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err433 := (strconv.Atoi(flag.Arg(4)))
    if err433 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg435 := flag.Arg(6)
    mbTrans436 := thrift.NewTMemoryBufferLen(len(arg435))
    defer mbTrans436.Close()
    _, err437 := mbTrans436.WriteString(arg435)
    if err437 != nil { 
      Usage()
      return
    }
    factory438 := thrift.NewTJSONProtocolFactory()
    jsProt439 := factory438.GetProtocol(mbTrans436)
    containerStruct5 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
    err440 := containerStruct5.ReadField6(jsProt439)
    if err440 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.GroupNames
    value5 := argvalue5
    fmt.Print(client.GetPartitionsPsWithAuth(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "get_partition_names_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg443 := flag.Arg(3)
    mbTrans444 := thrift.NewTMemoryBufferLen(len(arg443))
    defer mbTrans444.Close()
    _, err445 := mbTrans444.WriteString(arg443)
    if err445 != nil { 
      Usage()
      return
    }
    factory446 := thrift.NewTJSONProtocolFactory()
    jsProt447 := factory446.GetProtocol(mbTrans444)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionNamesPsArgs()
    err448 := containerStruct2.ReadField3(jsProt447)
    if err448 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err449 := (strconv.Atoi(flag.Arg(4)))
    if err449 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionNamesPs(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_by_filter":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err453 := (strconv.Atoi(flag.Arg(4)))
    if err453 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsByFilter(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_by_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg456 := flag.Arg(3)
    mbTrans457 := thrift.NewTMemoryBufferLen(len(arg456))
    defer mbTrans457.Close()
    _, err458 := mbTrans457.WriteString(arg456)
    if err458 != nil { 
      Usage()
      return
    }
    factory459 := thrift.NewTJSONProtocolFactory()
    jsProt460 := factory459.GetProtocol(mbTrans457)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsByNamesArgs()
    err461 := containerStruct2.ReadField3(jsProt460)
    if err461 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Names
    value2 := argvalue2
    fmt.Print(client.GetPartitionsByNames(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg464 := flag.Arg(3)
    mbTrans465 := thrift.NewTMemoryBufferLen(len(arg464))
    defer mbTrans465.Close()
    _, err466 := mbTrans465.WriteString(arg464)
    if err466 != nil {
      Usage()
      return
    }
    factory467 := thrift.NewTJSONProtocolFactory()
    jsProt468 := factory467.GetProtocol(mbTrans465)
    argvalue2 := hive_metastore.NewPartition()
    err469 := argvalue2.Read(jsProt468)
    if err469 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterPartitions requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg472 := flag.Arg(3)
    mbTrans473 := thrift.NewTMemoryBufferLen(len(arg472))
    defer mbTrans473.Close()
    _, err474 := mbTrans473.WriteString(arg472)
    if err474 != nil { 
      Usage()
      return
    }
    factory475 := thrift.NewTJSONProtocolFactory()
    jsProt476 := factory475.GetProtocol(mbTrans473)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsArgs()
    err477 := containerStruct2.ReadField3(jsProt476)
    if err477 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.NewParts_
    value2 := argvalue2
    fmt.Print(client.AlterPartitions(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partition_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterPartitionWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg480 := flag.Arg(3)
    mbTrans481 := thrift.NewTMemoryBufferLen(len(arg480))
    defer mbTrans481.Close()
    _, err482 := mbTrans481.WriteString(arg480)
    if err482 != nil {
      Usage()
      return
    }
    factory483 := thrift.NewTJSONProtocolFactory()
    jsProt484 := factory483.GetProtocol(mbTrans481)
    argvalue2 := hive_metastore.NewPartition()
    err485 := argvalue2.Read(jsProt484)
    if err485 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg486 := flag.Arg(4)
    mbTrans487 := thrift.NewTMemoryBufferLen(len(arg486))
    defer mbTrans487.Close()
    _, err488 := mbTrans487.WriteString(arg486)
    if err488 != nil {
      Usage()
      return
    }
    factory489 := thrift.NewTJSONProtocolFactory()
    jsProt490 := factory489.GetProtocol(mbTrans487)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err491 := argvalue3.Read(jsProt490)
    if err491 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "rename_partition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RenamePartition requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg494 := flag.Arg(3)
    mbTrans495 := thrift.NewTMemoryBufferLen(len(arg494))
    defer mbTrans495.Close()
    _, err496 := mbTrans495.WriteString(arg494)
    if err496 != nil { 
      Usage()
      return
    }
    factory497 := thrift.NewTJSONProtocolFactory()
    jsProt498 := factory497.GetProtocol(mbTrans495)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreRenamePartitionArgs()
    err499 := containerStruct2.ReadField3(jsProt498)
    if err499 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    arg500 := flag.Arg(4)
    mbTrans501 := thrift.NewTMemoryBufferLen(len(arg500))
    defer mbTrans501.Close()
    _, err502 := mbTrans501.WriteString(arg500)
    if err502 != nil {
      Usage()
      return
    }
    factory503 := thrift.NewTJSONProtocolFactory()
    jsProt504 := factory503.GetProtocol(mbTrans501)
    argvalue3 := hive_metastore.NewPartition()
    err505 := argvalue3.Read(jsProt504)
    if err505 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.RenamePartition(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_config_value":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetConfigValue(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partition_name_to_vals":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToVals(context.Background(), value0))
    fmt.Print("\n")
    break
  case "partition_name_to_spec":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToSpec(context.Background(), value0))
    fmt.Print("\n")
    break
  case "markPartitionForEvent":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "MarkPartitionForEvent requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg512 := flag.Arg(3)
    mbTrans513 := thrift.NewTMemoryBufferLen(len(arg512))
    defer mbTrans513.Close()
    _, err514 := mbTrans513.WriteString(arg512)
    if err514 != nil { 
      Usage()
      return
    }
    factory515 := thrift.NewTJSONProtocolFactory()
    jsProt516 := factory515.GetProtocol(mbTrans513)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreMarkPartitionForEventArgs()
    err517 := containerStruct2.ReadField3(jsProt516)
    if err517 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := hive_metastore.PartitionEventType(tmp3)
    value3 := argvalue3
    fmt.Print(client.MarkPartitionForEvent(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "isPartitionMarkedForEvent":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "IsPartitionMarkedForEvent requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg520 := flag.Arg(3)
    mbTrans521 := thrift.NewTMemoryBufferLen(len(arg520))
    defer mbTrans521.Close()
    _, err522 := mbTrans521.WriteString(arg520)
    if err522 != nil { 
      Usage()
      return
    }
    factory523 := thrift.NewTJSONProtocolFactory()
    jsProt524 := factory523.GetProtocol(mbTrans521)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreIsPartitionMarkedForEventArgs()
    err525 := containerStruct2.ReadField3(jsProt524)
    if err525 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := hive_metastore.PartitionEventType(tmp3)
    value3 := argvalue3
    fmt.Print(client.IsPartitionMarkedForEvent(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "add_index":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddIndex requires 2 args")
      flag.Usage()
    }
    arg526 := flag.Arg(1)
    mbTrans527 := thrift.NewTMemoryBufferLen(len(arg526))
    defer mbTrans527.Close()
    _, err528 := mbTrans527.WriteString(arg526)
    if err528 != nil {
      Usage()
      return
    }
    factory529 := thrift.NewTJSONProtocolFactory()
    jsProt530 := factory529.GetProtocol(mbTrans527)
    argvalue0 := hive_metastore.NewIndex()
    err531 := argvalue0.Read(jsProt530)
    if err531 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg532 := flag.Arg(2)
    mbTrans533 := thrift.NewTMemoryBufferLen(len(arg532))
    defer mbTrans533.Close()
    _, err534 := mbTrans533.WriteString(arg532)
    if err534 != nil {
      Usage()
      return
    }
    factory535 := thrift.NewTJSONProtocolFactory()
    jsProt536 := factory535.GetProtocol(mbTrans533)
    argvalue1 := hive_metastore.NewTable()
    err537 := argvalue1.Read(jsProt536)
    if err537 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddIndex(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alter_index":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterIndex requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg541 := flag.Arg(4)
    mbTrans542 := thrift.NewTMemoryBufferLen(len(arg541))
    defer mbTrans542.Close()
    _, err543 := mbTrans542.WriteString(arg541)
    if err543 != nil {
      Usage()
      return
    }
    factory544 := thrift.NewTJSONProtocolFactory()
    jsProt545 := factory544.GetProtocol(mbTrans542)
    argvalue3 := hive_metastore.NewIndex()
    err546 := argvalue3.Read(jsProt545)
    if err546 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterIndex(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_index_by_name":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropIndexByName requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropIndexByName(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_index_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetIndexByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_indexes":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexes requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err556 := (strconv.Atoi(flag.Arg(3)))
    if err556 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetIndexes(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_index_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err559 := (strconv.Atoi(flag.Arg(3)))
    if err559 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetIndexNames(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "update_table_column_statistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateTableColumnStatistics requires 1 args")
      flag.Usage()
    }
    arg560 := flag.Arg(1)
    mbTrans561 := thrift.NewTMemoryBufferLen(len(arg560))
    defer mbTrans561.Close()
    _, err562 := mbTrans561.WriteString(arg560)
    if err562 != nil {
      Usage()
      return
    }
    factory563 := thrift.NewTJSONProtocolFactory()
    jsProt564 := factory563.GetProtocol(mbTrans561)
    argvalue0 := hive_metastore.NewColumnStatistics()
    err565 := argvalue0.Read(jsProt564)
    if err565 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateTableColumnStatistics(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_partition_column_statistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatistics requires 1 args")
      flag.Usage()
    }
    arg566 := flag.Arg(1)
    mbTrans567 := thrift.NewTMemoryBufferLen(len(arg566))
    defer mbTrans567.Close()
    _, err568 := mbTrans567.WriteString(arg566)
    if err568 != nil {
      Usage()
      return
    }
    factory569 := thrift.NewTJSONProtocolFactory()
    jsProt570 := factory569.GetProtocol(mbTrans567)
    argvalue0 := hive_metastore.NewColumnStatistics()
    err571 := argvalue0.Read(jsProt570)
    if err571 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdatePartitionColumnStatistics(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table_column_statistics":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableColumnStatistics requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetTableColumnStatistics(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_column_statistics":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionColumnStatistics requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetPartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "delete_partition_column_statistics":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DeletePartitionColumnStatistics requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.DeletePartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "delete_table_column_statistics":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteTableColumnStatistics requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteTableColumnStatistics(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "create_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
      flag.Usage()
    }
    arg586 := flag.Arg(1)
    mbTrans587 := thrift.NewTMemoryBufferLen(len(arg586))
    defer mbTrans587.Close()
    _, err588 := mbTrans587.WriteString(arg586)
    if err588 != nil {
      Usage()
      return
    }
    factory589 := thrift.NewTJSONProtocolFactory()
    jsProt590 := factory589.GetProtocol(mbTrans587)
    argvalue0 := hive_metastore.NewRole()
    err591 := argvalue0.Read(jsProt590)
    if err591 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_role_names":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRoleNames(context.Background()))
    fmt.Print("\n")
    break
  case "grant_role":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_metastore.PrincipalType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := hive_metastore.PrincipalType(tmp4)
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GrantRole(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "revoke_role":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_metastore.PrincipalType(tmp2)
    value2 := argvalue2
    fmt.Print(client.RevokeRole(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_roles":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_metastore.PrincipalType(tmp1)
    value1 := argvalue1
    fmt.Print(client.ListRoles(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_privilege_set":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
      flag.Usage()
    }
    arg600 := flag.Arg(1)
    mbTrans601 := thrift.NewTMemoryBufferLen(len(arg600))
    defer mbTrans601.Close()
    _, err602 := mbTrans601.WriteString(arg600)
    if err602 != nil {
      Usage()
      return
    }
    factory603 := thrift.NewTJSONProtocolFactory()
    jsProt604 := factory603.GetProtocol(mbTrans601)
    argvalue0 := hive_metastore.NewHiveObjectRef()
    err605 := argvalue0.Read(jsProt604)
    if err605 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg607 := flag.Arg(3)
    mbTrans608 := thrift.NewTMemoryBufferLen(len(arg607))
    defer mbTrans608.Close()
    _, err609 := mbTrans608.WriteString(arg607)
    if err609 != nil { 
      Usage()
      return
    }
    factory610 := thrift.NewTJSONProtocolFactory()
    jsProt611 := factory610.GetProtocol(mbTrans608)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPrivilegeSetArgs()
    err612 := containerStruct2.ReadField3(jsProt611)
    if err612 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.GroupNames
    value2 := argvalue2
    fmt.Print(client.GetPrivilegeSet(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_privileges":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_metastore.PrincipalType(tmp1)
    value1 := argvalue1
    arg614 := flag.Arg(3)
    mbTrans615 := thrift.NewTMemoryBufferLen(len(arg614))
    defer mbTrans615.Close()
    _, err616 := mbTrans615.WriteString(arg614)
    if err616 != nil {
      Usage()
      return
    }
    factory617 := thrift.NewTJSONProtocolFactory()
    jsProt618 := factory617.GetProtocol(mbTrans615)
    argvalue2 := hive_metastore.NewHiveObjectRef()
    err619 := argvalue2.Read(jsProt618)
    if err619 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ListPrivileges(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "grant_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
      flag.Usage()
    }
    arg620 := flag.Arg(1)
    mbTrans621 := thrift.NewTMemoryBufferLen(len(arg620))
    defer mbTrans621.Close()
    _, err622 := mbTrans621.WriteString(arg620)
    if err622 != nil {
      Usage()
      return
    }
    factory623 := thrift.NewTJSONProtocolFactory()
    jsProt624 := factory623.GetProtocol(mbTrans621)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err625 := argvalue0.Read(jsProt624)
    if err625 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantPrivileges(context.Background(), value0))
    fmt.Print("\n")
    break
  case "revoke_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
      flag.Usage()
    }
    arg626 := flag.Arg(1)
    mbTrans627 := thrift.NewTMemoryBufferLen(len(arg626))
    defer mbTrans627.Close()
    _, err628 := mbTrans627.WriteString(arg626)
    if err628 != nil {
      Usage()
      return
    }
    factory629 := thrift.NewTJSONProtocolFactory()
    jsProt630 := factory629.GetProtocol(mbTrans627)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err631 := argvalue0.Read(jsProt630)
    if err631 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RevokePrivileges(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_ugi":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetUgi requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg633 := flag.Arg(2)
    mbTrans634 := thrift.NewTMemoryBufferLen(len(arg633))
    defer mbTrans634.Close()
    _, err635 := mbTrans634.WriteString(arg633)
    if err635 != nil { 
      Usage()
      return
    }
    factory636 := thrift.NewTJSONProtocolFactory()
    jsProt637 := factory636.GetProtocol(mbTrans634)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreSetUgiArgs()
    err638 := containerStruct1.ReadField2(jsProt637)
    if err638 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.GroupNames
    value1 := argvalue1
    fmt.Print(client.SetUgi(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_delegation_token":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetDelegationToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetDelegationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "renew_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RenewDelegationToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cancel_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CancelDelegationToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getName":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetName requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetName(context.Background()))
    fmt.Print("\n")
    break
  case "getVersion":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetVersion requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetVersion(context.Background()))
    fmt.Print("\n")
    break
  case "getStatus":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetStatus requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetStatus(context.Background()))
    fmt.Print("\n")
    break
  case "getStatusDetails":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetStatusDetails requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetStatusDetails(context.Background()))
    fmt.Print("\n")
    break
  case "getCounters":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCounters requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCounters(context.Background()))
    fmt.Print("\n")
    break
  case "getCounter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCounter requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCounter(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setOption":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetOption requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetOption(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getOption":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetOption requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetOption(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getOptions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOptions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOptions(context.Background()))
    fmt.Print("\n")
    break
  case "getCpuProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCpuProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err647 := (strconv.Atoi(flag.Arg(1)))
    if err647 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetCpuProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "aliveSince":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "AliveSince requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.AliveSince(context.Background()))
    fmt.Print("\n")
    break
  case "reinitialize":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Reinitialize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Reinitialize(context.Background()))
    fmt.Print("\n")
    break
  case "shutdown":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Shutdown requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Shutdown(context.Background()))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
